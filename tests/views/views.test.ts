import { ArrayView } from "../../src/views";
import { ArrayCompressSelector, ArrayIndexListSelector } from "../../src/selectors";
import {
  dataProviderForSliceInBoundsPythonAutoGeneratedSuccess,
  dataProviderForSliceOutOfBoundsPythonAutoGeneratedSuccess,
  // @ts-ignore
} from '../fixtures/python-slices';

describe.each([
  ...dataProviderForReadSuccess(),
] as Array<[Array<number>]>)(
  "Array View Read Success Test",
  (
    source: Array<number>,
  ) => {
    it("", () => {
      // Given
      const view = new ArrayView<number>(source);

      for (let i = 0; i < source.length; i++) {
        // When
        const actual = view.loc[i];
        const expected = source[i];

        // Then
        expect(actual).toBe(expected);
      }

      // And then
      expect(view.toArray()).toEqual(source);
    });
  },
);

function dataProviderForReadSuccess(): Array<unknown> {
  return [
    [[1]],
    [[1, 2]],
    [[1, 2, 3]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]],
    [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]],
  ];
}

describe.each([
  ...dataProviderForWriteSuccess(),
] as Array<[Array<number>, Array<number>]>)(
  "Array View Write Success Test",
  (
    source: Array<number>,
    toWrite: Array<number>,
  ) => {
    it("", () => {
      // Given
      const view = new ArrayView<number>(source);

      for (let i = 0; i < source.length; i++) {
        // When
        view.loc[i] = toWrite[i];

        // Then
        expect(view.loc[i]).toBe(toWrite[i]);
        expect(source[i]).toBe(toWrite[i]);
      }

      // And then
      expect(view.toArray()).toEqual(toWrite);
      expect(source).toEqual(toWrite);
    });
  },
);

describe.each([
  ...dataProviderForWriteSuccess(),
] as Array<[Array<number>, Array<number>]>)(
  "Array View Set Success Test",
  (
    source: Array<number>,
    toWrite: Array<number>,
  ) => {
    it("", () => {
      // Given
      const view = new ArrayView<number>(source);

      // When
      view.set(toWrite);

      // And then
      expect(view.toArray()).toEqual(toWrite);
      expect(source).toEqual(toWrite);
    });
  },
);

describe.each([
  ...dataProviderForWriteSuccess(),
] as Array<[Array<number>, Array<number>]>)(
  "Array View Set Loc Success Test",
  (
    source: Array<number>,
    toWrite: Array<number>,
  ) => {
    it("", () => {
      // Given
      const view = new ArrayView<number>(source);

      // When
      view.loc[':'] = toWrite;

      // And then
      expect(view.toArray()).toEqual(toWrite);
      expect(source).toEqual(toWrite);
    });
  },
);

function dataProviderForWriteSuccess(): Array<unknown> {
  return [
    [[1], [0]],
    [[1, 2], [3, 5]],
    [[1, 2, 3], [11, 22, 33]],
  ];
}

describe.each([
  ...dataProviderForIncrementSuccess(),
] as Array<[Array<number>, Array<number>]>)(
  "Array View Increment Success Test",
  (
    source: Array<number>,
    expected: Array<number>,
  ) => {
    it("", () => {
      // Given
      const view = new ArrayView<number>(source);

      for (let i = 0; i < source.length; i++) {
        // When
        view.loc[i]++;

        // Then
        expect(view.loc[i]).toBe(expected[i]);
        expect(source[i]).toBe(expected[i]);
      }

      // And then
      expect(view.toArray()).toEqual(expected);
      expect(source).toEqual(expected);
    });
  },
);

function dataProviderForIncrementSuccess(): Array<unknown> {
  return [
    [[1], [2]],
    [[1, 2], [2, 3]],
    [[3, 2, 1], [4, 3, 2]],
  ];
}

describe.each([
  ...dataProviderForIndexListSubviewReadSuccess(),
] as Array<[Array<number>, Array<number>, Array<number>]>)(
  "Array View Index List Subview Read Success Test",
  (
    source: Array<number>,
    indexes: Array<number>,
    expected: Array<number>,
  ) => {
    it("", () => {
      // Given
      const view = new ArrayView<number>(source);
      const subview = view.subview(new ArrayIndexListSelector(indexes));

      expect(subview.length).toEqual(indexes.length);
      expect(subview.length).toEqual(expected.length);

      for (let i = 0; i < subview.length; i++) {
        expect(subview.loc[i]).toBe(expected[i]);
      }

      for (let i = 0; i < view.length; i++) {
        expect(view.loc[i]).toBe(source[i]);
      }

      // And then
      expect(view.toArray()).toEqual(source);
      expect(subview.toArray()).toEqual(expected);
    });
  },
);

function dataProviderForIndexListSubviewReadSuccess(): Array<unknown> {
  return [
    [[], [], []],
    [[1], [], []],
    [[1, 2, 3], [], []],
    [[1], [0], [1]],
    [[1], [0, 0], [1, 1]],
    [[1], [0, 0, 0], [1, 1, 1]],
    [[1, 2], [0], [1]],
    [[1, 2], [1], [2]],
    [[1, 2], [0, 1], [1, 2]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 5, 7], [2, 4, 6, 8]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], [7, 5, 3, 1], [8, 6, 4, 2]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 3, 7], [2, 6, 4, 8]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 7, 8], [1, 2, 8, 9]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 1, 5, 5, 3], [2, 2, 6, 6, 4]],
  ];
}

describe.each([
  ...dataProviderForIndexListSubviewUpdateSuccess(),
] as Array<[Array<number>, Array<number>, Array<number>, Array<number>]>)(
  "Array View Index List Subview Update Success Test",
  (
    source: Array<number>,
    indexes: Array<number>,
    expectedSubview: Array<number>,
    expectedView: Array<number>,
  ) => {
    it("", () => {
      // Given
      const view = new ArrayView<number>(source);
      const subview = view.subview(new ArrayIndexListSelector(indexes));

      // Then
      expect(view.toArray()).toEqual(source);

      for (let i = 0; i < subview.length; i++) {
        ++subview.loc[i];
      }

      expect(subview.toArray()).toEqual(expectedSubview);
      expect(view.toArray()).toEqual(expectedView);
      expect(source).toEqual(expectedView);
    });
  },
);

function dataProviderForIndexListSubviewUpdateSuccess(): Array<unknown> {
  return [
    [
      [],
      [],
      [],
      [],
    ],
    [
      [1],
      [],
      [],
      [1],
    ],
    [
      [1, 2, 3],
      [],
      [],
      [1, 2, 3],
    ],
    [
      [1],
      [0],
      [2],
      [2],
    ],
    [
      [1],
      [0, 0],
      [3, 3],
      [3],
    ],
    [
      [1],
      [0, 0, 0],
      [4, 4, 4],
      [4],
    ],
    [
      [1, 2],
      [0],
      [2],
      [2, 2],
    ],
    [
      [1, 2],
      [1],
      [3],
      [1, 3],
    ],
    [
      [1, 2],
      [0, 1],
      [2, 3],
      [2, 3],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9],
      [1, 3, 5, 7],
      [3, 5, 7, 9],
      [1, 3, 3, 5, 5, 7, 7, 9, 9],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9],
      [7, 5, 3, 1],
      [9, 7, 5, 3],
      [1, 3, 3, 5, 5, 7, 7, 9, 9],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9],
      [1, 5, 3, 7],
      [3, 7, 5, 9],
      [1, 3, 3, 5, 5, 7, 7, 9, 9],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9],
      [0, 1, 7, 8],
      [2, 3, 9, 10],
      [2, 3, 3, 4, 5, 6, 7, 9, 10],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9],
      [1, 1, 5, 5, 3],
      [4, 4, 8, 8, 5],
      [1, 4, 3, 5, 5, 8, 7, 8, 9],
    ],
  ];
}

describe.each([
  ...dataProviderForCompressSubviewReadSuccess(),
] as Array<[Array<number>, Array<boolean>, Array<number>]>)(
  "Array View Compress Subview Read Success Test",
  (
    source: Array<number>,
    mask: Array<boolean>,
    expected: Array<number>,
  ) => {
    it("", () => {
      // Given
      const view = new ArrayView<number>(source);
      const subview = view.subview(new ArrayCompressSelector(mask));

      expect(subview.length).toEqual(mask.filter((x) => x).length);
      expect(subview.length).toEqual(expected.length);

      for (let i = 0; i < subview.length; i++) {
        expect(subview.loc[i]).toBe(expected[i]);
      }

      for (let i = 0; i < view.length; i++) {
        expect(view.loc[i]).toBe(source[i]);
      }

      // And then
      expect(view.toArray()).toEqual(source);
      expect(subview.toArray()).toEqual(expected);
    });
  },
);

function dataProviderForCompressSubviewReadSuccess(): Array<unknown> {
  return [
    [[], [], []],
    [[1], [0], []],
    [[1, 2, 3], [0, 0, 0], []],
    [[1], [1], [1]],
    [[1, 2], [1, 0], [1]],
    [[1, 2], [0, 1], [2]],
    [[1, 2], [1, 1], [1, 2]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 0, 1, 0, 1, 0, 1, 0], [2, 4, 6, 8]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 2, 3, 9]],
  ];
}

describe.each([
  ...dataProviderForCompressSubviewUpdateSuccess(),
] as Array<[Array<number>, Array<boolean>, Array<number>, Array<number>]>)(
  "Array View Compress Subview Update Success Test",
  (
    source: Array<number>,
    mask: Array<boolean>,
    expectedSubview: Array<number>,
    expectedView: Array<number>,
  ) => {
    it("", () => {
      // Given
      const view = new ArrayView<number>(source);
      const subview = view.subview(new ArrayCompressSelector(mask));

      // Then
      expect(view.toArray()).toEqual(source);

      for (let i = 0; i < subview.length; i++) {
        ++subview.loc[i];
      }

      expect(subview.toArray()).toEqual(expectedSubview);
      expect(view.toArray()).toEqual(expectedView);
      expect(source).toEqual(expectedView);
    });
  },
);

function dataProviderForCompressSubviewUpdateSuccess(): Array<unknown> {
  return [
    [
      [],
      [],
      [],
      [],
    ],
    [
      [1],
      [0],
      [],
      [1],
    ],
    [
      [1, 2, 3],
      [0, 0, 0],
      [],
      [1, 2, 3],
    ],
    [
      [1],
      [1],
      [2],
      [2],
    ],
    [
      [1, 2],
      [1, 0],
      [2],
      [2, 2],
    ],
    [
      [1, 2],
      [0, 1],
      [3],
      [1, 3],
    ],
    [
      [1, 2],
      [1, 1],
      [2, 3],
      [2, 3],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9],
      [0, 1, 0, 1, 0, 1, 0, 1, 0],
      [3, 5, 7, 9],
      [1, 3, 3, 5, 5, 7, 7, 9, 9],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9],
      [1, 1, 1, 0, 0, 0, 0, 0, 1],
      [2, 3, 4, 10],
      [2, 3, 4, 4, 5, 6, 7, 8, 10],
    ],
  ];
}

describe.each([
  ...dataProviderForSliceSubviewReadSuccess(),
  ...dataProviderForSliceInBoundsPythonAutoGeneratedSuccess(),
  ...dataProviderForSliceOutOfBoundsPythonAutoGeneratedSuccess(),
] as Array<[Array<number>, string, Array<number>]>)(
  "Array View Slice Subview Read Success Test",
  (
    source: Array<number>,
    config: string,
    expected: Array<number>,
  ) => {
    it("", () => {
      // Given
      const view = new ArrayView<number>(source);
      const subview = view.subview(config);

      expect(subview.toArray()).toEqual(expected);
      expect(subview.length).toEqual(expected.length);

      for (let i = 0; i < subview.length; i++) {
        expect(subview.loc[i]).toBe(expected[i]);
      }

      for (let i = 0; i < view.length; i++) {
        expect(view.loc[i]).toBe(source[i]);
      }

      // And then
      expect(view.toArray()).toEqual(source);
      expect(subview.toArray()).toEqual(expected);
    });
  },
);

describe.each([
  ...dataProviderForSliceSubviewReadSuccess(),
  ...dataProviderForSliceInBoundsPythonAutoGeneratedSuccess(),
  ...dataProviderForSliceOutOfBoundsPythonAutoGeneratedSuccess(),
] as Array<[Array<number>, string, Array<number>]>)(
  "Array View Slice Subview Loc Read Success Test",
  (
    source: Array<number>,
    config: string,
    expected: Array<number>,
  ) => {
    it("", () => {
      // Given
      const view = new ArrayView<number>(source);
      const slicedArray = view.loc[config];

      expect(slicedArray).toEqual(expected);
      expect(slicedArray.length).toEqual(expected.length);

      for (let i = 0; i < slicedArray.length; i++) {
        expect(slicedArray[i]).toBe(expected[i]);
      }

      for (let i = 0; i < view.length; i++) {
        expect(view.loc[i]).toBe(source[i]);
      }

      // And then
      expect(view.toArray()).toEqual(source);
      expect(slicedArray).toEqual(expected);
    });
  },
);

function dataProviderForSliceSubviewReadSuccess(): Array<unknown> {
  return [
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '1:6', [2, 3, 4, 5, 6]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '1:6:1', [2, 3, 4, 5, 6]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '1:6:2', [2, 4, 6]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '2:8', [3, 4, 5, 6, 7, 8]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '2:8:1', [3, 4, 5, 6, 7, 8]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '2:8:2', [3, 5, 7]],

    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '-1::-1', [9, 8, 7, 6, 5, 4, 3, 2, 1]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '-1:0:-1', [9, 8, 7, 6, 5, 4, 3, 2]],

    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '0:9:1', [1, 2, 3, 4, 5, 6, 7, 8, 9]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '0:9:2', [1, 3, 5, 7, 9]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '1:9:2', [2, 4, 6, 8]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '0:10:1', [1, 2, 3, 4, 5, 6, 7, 8, 9]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '0:10:2', [1, 3, 5, 7, 9]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '-9:9:1', [1, 2, 3, 4, 5, 6, 7, 8, 9]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '-9:9:2', [1, 3, 5, 7, 9]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '-10:10:1', [1, 2, 3, 4, 5, 6, 7, 8, 9]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '-10:10:2', [1, 3, 5, 7, 9]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '-5:10:1', [5, 6, 7, 8, 9]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '-5:100:2', [5, 7, 9]],

    [[], '0:', []],
    [[], '0:0', []],
    [[], '0:0:1', []],
    [[], '1:-1', []],
    [[], '-1:-1', []],
    [[], '-2:-1', []],
    [[], '-2,:-1: 2', []],
    [[], '-1:0:-1', []],
    [[1], '0:', [1]],
    [[1], '0:1', [1]],
    [[1], '0:1:1', [1]],
    [[1], '0:1:2', [1]],
    [[1], '0:-1', []],
    [[1], '0:-1:1', []],
    [[1], '0:-1:2', []],
    [[1], '0:10:100', [1]],
    [[1], '1:10:100', []],
    [[1], '0:', [1]],
    [[1, 2, 3], '0:0:1', []],
    [[1], '1:', []],
    [[1, 2], '1:0', []],
    [[1, 2], '1::-1', [2, 1]],
    [[1, 2], '0:1', [1]],
    [[1, 2], '1:1', []],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '1::2', [2, 4, 6, 8]],
    [[1, 2, 3, 4, 5, 6, 7, 8, 9], '::2', [1, 3, 5, 7, 9]],
  ];
}

describe.each([
  ...dataProviderForSliceSubviewWriteSuccess(),
] as Array<[Array<number>, string, Array<number>, Array<number>]>)(
  "Array View Slice Subview Loc Write Success Test",
  (
    source: Array<number>,
    config: string,
    toWrite: Array<number>,
    expected: Array<number>,
  ) => {
    it("", () => {
      // Given
      const view = new ArrayView<number>(source);

      // When
      view.loc[config] = toWrite;

      // And then
      expect(view.toArray()).toEqual(expected);
      expect(source).toEqual(expected);
    });
  },
);

function dataProviderForSliceSubviewWriteSuccess(): Array<unknown> {
  return [
    [[], ':', [], []],
    [[1], ':', [11], [11]],
    [[1, 2, 3], ':', [2, 4, 6], [2, 4, 6]],
    [[1, 2, 3], '0:', [2, 4, 6], [2, 4, 6]],
    [[1, 2, 3], ':3', [2, 4, 6], [2, 4, 6]],
    [[1, 2, 3], '0:3', [2, 4, 6], [2, 4, 6]],
    [[1, 2, 3], '1:', [22, 33], [1, 22, 33]],
    [[1, 2, 3], ':2', [11, 22], [11, 22, 3]],
    [[1, 2, 3], ':-1', [11, 22], [11, 22, 3]],
    [[1, 2, 3, 4, 5, 6], '::2', [77, 88, 99], [77, 2, 88, 4, 99, 6]],
    [[1, 2, 3, 4, 5, 6], '::-2', [77, 88, 99], [1, 99, 3, 88, 5, 77]],
    [[1, 2, 3, 4, 5, 6], '1::2', [77, 88, 99], [1, 77, 3, 88, 5, 99]],
    [[1, 2, 3, 4, 5, 6], '-2::-2', [77, 88, 99], [99, 2, 88, 4, 77, 6]],
    [[1, 2, 3, 4, 5, 6, 7, 8], ':-2:2', [77, 88, 99], [77, 2, 88, 4, 99, 6, 7, 8]],
    [[1, 2, 3, 4, 5, 6, 7, 8], ':6:2', [77, 88, 99], [77, 2, 88, 4, 99, 6, 7, 8]],
    [[1, 2, 3, 4, 5, 6, 7, 8], '1:-1:2', [77, 88, 99], [1, 77, 3, 88, 5, 99, 7, 8]],
  ];
}

describe.each([
  ...dataProviderForCombineReadSuccess(),
] as Array<[Array<number>, (source: Array<number>) => ArrayView<number>, Array<number>]>)(
  "Array View Combine Read Success Test",
  (
    source: Array<number>,
    viewGetter: (source: Array<number>) => ArrayView<number>,
    expected: Array<number>,
  ) => {
    it("", () => {
      // When
      const view = viewGetter(source);

      // Then
      expect(view.toArray()).toEqual(expected);
    });
  },
);

function dataProviderForCombineReadSuccess(): Array<unknown> {
  return [
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview('::2'),
      [1, 3, 5, 7, 9],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview('::2')
        .subview(new ArrayCompressSelector([true, false, true, false, true])),
      [1, 5, 9],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview('::2')
        .subview(new ArrayCompressSelector([true, false, true, false, true]))
        .subview(new ArrayIndexListSelector([0, 2])),
      [1, 9],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview('::2')
        .subview(new ArrayCompressSelector([true, false, true, false, true]))
        .subview(new ArrayIndexListSelector([0, 2]))
        .subview('1:'),
      [9],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview(new ArrayCompressSelector([true, false, true, false, true, false, true, false, true, false]))
        .subview(new ArrayCompressSelector([true, false, true, false, true]))
        .subview(new ArrayCompressSelector([true, false, true]))
        .subview(new ArrayCompressSelector([false, true])),
      [9],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview(new ArrayCompressSelector([true, false, true, false, true, false, true, false, true, false]))
        .subview(new ArrayCompressSelector([true, false, true, false, true]))
        .subview(new ArrayCompressSelector([true, false, true])),
      [1, 9],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview(new ArrayIndexListSelector([0, 2, 4, 6, 8]))
        .subview(new ArrayIndexListSelector([0, 2, 4]))
        .subview(new ArrayIndexListSelector([0, 2]))
        .subview(new ArrayIndexListSelector([1])),
      [9],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview('::2')
        .subview('::2')
        .subview('::2'),
      [1, 9],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview('::2')
        .subview('::2')
        .subview('::2')
        .subview('1:'),
      [9],
    ],
  ];
}

describe.each([
  ...dataProviderForCombineWriteSuccess(),
] as Array<[Array<number>, (source: Array<number>) => ArrayView<number>, Array<number>, Array<number>]>)(
  "Array View Combine Write Success Test",
  (
    source: Array<number>,
    viewGetter: (source: Array<number>) => ArrayView<number>,
    toWrite: Array<number>,
    expected: Array<number>,
  ) => {
    it("", () => {
      // Given
      const view = viewGetter(source);

      // When
      view.set(toWrite)

      // Then
      expect(source).toEqual(expected);
    });
  },
);

describe.each([
  ...dataProviderForCombineWriteSuccess(),
] as Array<[Array<number>, (source: Array<number>) => ArrayView<number>, Array<number>, Array<number>]>)(
  "Array View Combine Write Slice Success Test",
  (
    source: Array<number>,
    viewGetter: (source: Array<number>) => ArrayView<number>,
    toWrite: Array<number>,
    expected: Array<number>,
  ) => {
    it("", () => {
      // Given
      const view = viewGetter(source);

      // When
      view.loc[':'] = toWrite;

      // Then
      expect(source).toEqual(expected);
    });
  },
);

function dataProviderForCombineWriteSuccess(): Array<unknown> {
  return [
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview('::2'),
      [11, 33, 55, 77, 99],
      [11, 2, 33, 4, 55, 6, 77, 8, 99, 10],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview('::2')
        .subview(new ArrayCompressSelector([true, false, true, false, true])),
      [11, 55, 99],
      [11, 2, 3, 4, 55, 6, 7, 8, 99, 10],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview('::2')
        .subview(new ArrayCompressSelector([true, false, true, false, true]))
        .subview(new ArrayIndexListSelector([0, 2])),
      [11, 99],
      [11, 2, 3, 4, 5, 6, 7, 8, 99, 10],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview('::2')
        .subview(new ArrayCompressSelector([true, false, true, false, true]))
        .subview(new ArrayIndexListSelector([0, 2]))
        .subview('1:'),
      [99],
      [1, 2, 3, 4, 5, 6, 7, 8, 99, 10],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview(new ArrayCompressSelector([true, false, true, false, true, false, true, false, true, false]))
        .subview(new ArrayCompressSelector([true, false, true, false, true]))
        .subview(new ArrayCompressSelector([true, false, true]))
        .subview(new ArrayCompressSelector([false, true])),
      [99],
      [1, 2, 3, 4, 5, 6, 7, 8, 99, 10],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview(new ArrayCompressSelector([true, false, true, false, true, false, true, false, true, false]))
        .subview(new ArrayCompressSelector([true, false, true, false, true]))
        .subview(new ArrayCompressSelector([true, false, true])),
      [11, 99],
      [11, 2, 3, 4, 5, 6, 7, 8, 99, 10],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview(new ArrayIndexListSelector([0, 2, 4, 6, 8]))
        .subview(new ArrayIndexListSelector([0, 2, 4]))
        .subview(new ArrayIndexListSelector([0, 2]))
        .subview(new ArrayIndexListSelector([1])),
      [99],
      [1, 2, 3, 4, 5, 6, 7, 8, 99, 10],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview('::2')
        .subview('::2')
        .subview('::2'),
      [11, 99],
      [11, 2, 3, 4, 5, 6, 7, 8, 99, 10],
    ],
    [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      (source: Array<number>) => new ArrayView<number>(source)
        .subview('::2')
        .subview('::2')
        .subview('::2')
        .subview('1:'),
      [99],
      [1, 2, 3, 4, 5, 6, 7, 8, 99, 10],
    ],
  ];
}
